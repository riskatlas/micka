<csw:DescribeRecordResponse xmlns:csw="http://www.opengis.net/cat/csw/2.0.2">
  <csw:SchemaComponent targetNamespace="http://www.opengis.net/cat/csw/2.0.2" schemaLanguage="http://www.w3.org/XML/Schema" >
   <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ogc="http://www.opengis.net/ogc" 
    	xmlns:ows="http://www.opengis.net/ows" xmlns:dc="http://purl.org/dc/elements/1.1/" 
    	xmlns:dct="http://purl.org/dc/terms/" 
    	targetNamespace="http://www.opengis.net/cat/csw" 
    	elementFormDefault="qualified" version="2.0.1">

  <xsd:include schemaLocation="http://schemas.opengis.net/csw/2.0.2/CSW-discovery.xsd"/>
    	
  <!-- 
      <xsd:import namespace="http://purl.org/dc/terms/" schemaLocation="./rec-dcterms.xsd" />
      <xsd:import namespace="http://purl.org/dc/elements/1.1/" schemaLocation="./rec-dcmes.xsd" />
      <xsd:import namespace="http://www.opengis.net/ows" schemaLocation="../../ows/1.0.0/ows-1.0.0.xsd" />
      <xsd:import namespace="http://www.opengis.net/ogc" schemaLocation="../../filter/1.1.0/filter-1.1.0.xsd" />

      <xsd:element name="AbstractRecord" id="AbstractRecord" abstract="true" type="csw:AbstractRecordType" />
      <xsd:complexType name="AbstractRecordType" id="AbstractRecordType" abstract="true" />
      <xsd:element name="DCMIRecord" type="csw:DCMIRecordType" substitutionGroup="csw:AbstractRecord" />
      <xsd:complexType name="DCMIRecordType">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">This type encapsulates all of the standard DCMI metadata terms, 
      including the Dublin Core refinements; these terms may be mapped to 
      the profile-specific information model.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
          <xsd:extension base="csw:AbstractRecordType">
            <xsd:sequence>
              <xsd:group ref="dct:DCMI-terms" />
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="BriefRecord" type="csw:BriefRecordType" substitutionGroup="csw:AbstractRecord" />
      <xsd:complexType name="BriefRecordType" final="#all">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">This type defines a brief representation of the common record format. 
      It extends AbstractRecordType to include only the dc:identifier and 
      dc:type properties.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
          <xsd:extension base="csw:AbstractRecordType">
            <xsd:sequence>
              <xsd:element ref="dc:identifier" />
              <xsd:element ref="dc:type" minOccurs="0" />
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="SummaryRecord" type="csw:SummaryRecordType" substitutionGroup="csw:AbstractRecord" />
      <xsd:complexType name="SummaryRecordType" final="#all">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">This type defines a summary representation of the common record format. 
      It extends AbstractRecordType to include the core properties.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
          <xsd:extension base="csw:AbstractRecordType">
            <xsd:sequence>
              <xsd:choice minOccurs="1" maxOccurs="unbounded">
                <xsd:element ref="dc:identifier" />
                <xsd:element ref="dc:type" />
                <xsd:element ref="dc:title" />
                <xsd:element ref="dc:subject" />
                <xsd:element ref="dc:format" />
                <xsd:element ref="dc:relation" />
                <xsd:element ref="dct:modified" />
                <xsd:element ref="dct:abstract" />
                <xsd:element ref="dct:spatial" />
              </xsd:choice>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="Record" type="csw:RecordType" substitutionGroup="csw:AbstractRecord" />
      <xsd:complexType name="RecordType" final="#all">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">This type extends DCMIRecordType to add ows:BoundingBox; it may be 
      used to specify a spatial envelope for the catalogued resource.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
          <xsd:extension base="csw:DCMIRecordType">
            <xsd:sequence>
              <xsd:element ref="ows:BoundingBox" minOccurs="0" />
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="RequestBaseType" id="RequestBaseType" abstract="true">
        <xsd:annotation>
          <xsd:documentation>Base type for all request messages except GetCapabilities. The 
         attributes identify the relevant service type and version.</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="service" type="ows:ServiceType" use="optional" default="http://www.opengis.net/cat/csw" />
        <xsd:attribute name="version" type="ows:VersionType" use="optional" default="2.0.1" />
      </xsd:complexType>
      <xsd:element name="GetCapabilities" type="csw:GetCapabilitiesType" id="GetCapabilities" />
      <xsd:complexType name="GetCapabilitiesType" id="GetCapabilitiesType">
        <xsd:annotation>
          <xsd:documentation>Request for a description of service capabilities. See OGC 05-008 
       for more information.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
          <xsd:extension base="ows:GetCapabilitiesType">
            <xsd:attribute name="service" type="ows:ServiceType" use="optional" default="http://www.opengis.net/cat/csw" />
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="Capabilities" type="csw:CapabilitiesType" id="Capabilities" />
      <xsd:complexType name="CapabilitiesType" id="CapabilitiesType">
        <xsd:annotation>
          <xsd:documentation>This type extends ows:CapabilitiesBaseType defined in OGC-05-008 
         to include information about supported OGC filter components. A 
         profile may extend this type to describe additional capabilities.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
          <xsd:extension base="ows:CapabilitiesBaseType">
            <xsd:sequence>
              <xsd:element ref="ogc:Filter_Capabilities" />
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:element name="DescribeRecord" type="csw:DescribeRecordType" id="DescribeRecord" />
      <xsd:complexType name="DescribeRecordType" id="DescribeRecordType">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">This request allows a user to discover elements of the
         information model supported by the catalogue. If no TypeName 
         elements are included, then all of the schemas for the 
         information model must be returned.
      
         schemaLanguage - preferred schema language
                          (W3C XML Schema by default)
         outputFormat - preferred output format (application/xml by default)</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
          <xsd:extension base="csw:RequestBaseType">
            <xsd:sequence>
              <xsd:element name="TypeName" type="csw:TypeNameType" minOccurs="0" maxOccurs="unbounded" />
            </xsd:sequence>
            <xsd:attribute name="outputFormat" type="xsd:string" use="optional" default="application/xml" />
            <xsd:attribute name="schemaLanguage" type="xsd:anyURI" use="optional" default="http://www.w3.org/XML/Schema" />
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:complexType name="TypeNameType" id="TypeNameType">
        <xsd:annotation>
          <xsd:documentation>The unqualified name of the model element for which the type 
         definition is requested. The targetNamespace MUST be specified, 
         although it may have the value "##any" to indicate any namespace.</xsd:documentation>
        </xsd:annotation>
        <xsd:simpleContent>
          <xsd:extension base="xsd:NCName">
            <xsd:attribute name="targetNamespace" type="xsd:anyURI" use="required" />
          </xsd:extension>
        </xsd:simpleContent>
      </xsd:complexType>
      <xsd:element name="DescribeRecordResponse" type="csw:DescribeRecordResponseType" id="DescribeRecordResponse" />
      <xsd:complexType name="DescribeRecordResponseType" id="DescribeRecordResponseType">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">The response contains a list of matching schema components
         in the requested schema language.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="SchemaComponent" type="csw:SchemaComponentType" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
      </xsd:complexType>
      <xsd:complexType name="SchemaComponentType" mixed="true" id="SchemaComponentType">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">A schema component includes a schema fragment (type
         definition) or an entire schema from some target namespace;
         the schema language is identified by URI. If the component
         is a schema fragment its parent MUST be referenced (parentSchema).</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:any namespace="##any" processContents="lax" />
        </xsd:sequence>
        <xsd:attribute name="targetNamespace" type="xsd:anyURI" use="required" />
        <xsd:attribute name="parentSchema" type="xsd:anyURI" use="optional" />
        <xsd:attribute name="schemaLanguage" type="xsd:anyURI" use="required" />
      </xsd:complexType>
      <xsd:element name="GetRecords" type="csw:GetRecordsType" id="GetRecords" />
      <xsd:complexType name="GetRecordsType" id="GetRecordsType">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">The principal means of searching the catalogue. The matching 
         catalogue entries may be included with the response. The client 
         may assign a requestId (absolute URI). A distributed search is 
         performed if the DistributedSearch element is present and the 
         catalogue is a member of a federation. Profiles may allow 
         alternative query expressions.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
          <xsd:extension base="csw:RequestBaseType">
            <xsd:sequence>
              <xsd:element name="DistributedSearch" type="csw:DistributedSearchType" minOccurs="0" />
              <xsd:element name="ResponseHandler" type="xsd:anyURI" minOccurs="0" maxOccurs="unbounded" />
              <xsd:choice>
                <xsd:element ref="csw:AbstractQuery" />
                <xsd:any processContents="strict" namespace="##other" />
              </xsd:choice>
            </xsd:sequence>
            <xsd:attribute name="requestId" type="xsd:anyURI" use="optional" />
            <xsd:attribute name="resultType" type="csw:ResultType" use="optional" default="hits" />
            <xsd:attributeGroup ref="csw:BasicRetrievalOptions" />
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:attributeGroup name="BasicRetrievalOptions" id="BasicRetrievalOptions">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">Various attributes that specify basic retrieval options:

            outputFormat   - the media type of the response message
            outputSchema   - the preferred schema for records in the result set
            startPosition  - requests a slice of the result set, starting
                             at this position
            maxRecords     - the maximum number of records to return. No
                             records are  returned if maxRecords=0.</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="outputFormat" type="xsd:string" use="optional" default="application/xml" />
        <xsd:attribute name="outputSchema" type="xsd:anyURI" use="optional" />
        <xsd:attribute name="startPosition" type="xsd:positiveInteger" use="optional" default="1" />
        <xsd:attribute name="maxRecords" type="xsd:nonNegativeInteger" use="optional" default="10" />
      </xsd:attributeGroup>
      <xsd:simpleType name="ResultType" id="ResultType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="results">
            <xsd:annotation>
              <xsd:documentation>Include results in the response.</xsd:documentation>
            </xsd:annotation>
          </xsd:enumeration>
          <xsd:enumeration value="hits">
            <xsd:annotation>
              <xsd:documentation>Provide a result set summary, but no results.</xsd:documentation>
            </xsd:annotation>
          </xsd:enumeration>
          <xsd:enumeration value="validate">
            <xsd:annotation>
              <xsd:documentation>Validate the request and return an Acknowledgement message if it 
	      is valid. Continue processing the request asynchronously.</xsd:documentation>
            </xsd:annotation>
          </xsd:enumeration>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="DistributedSearchType" id="DistributedSearchType">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">Governs the behaviour of a distributed search.
         hopCount     - the maximum number of message hops before
                        the search is terminated. Each catalogue node 
                        decrements this value when the request is received, 
                        and must not forward the request if hopCount=0.</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="hopCount" type="xsd:positiveInteger" use="optional" default="2" />
      </xsd:complexType>
      <xsd:element name="AbstractQuery" type="csw:AbstractQueryType" id="AbstractQuery" abstract="true" />
      <xsd:complexType name="AbstractQueryType" id="AbstractQueryType" abstract="true" />
      <xsd:element name="Query" type="csw:QueryType" id="Query" substitutionGroup="csw:AbstractQuery" />
      <xsd:complexType name="QueryType" id="QueryType">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">Specifies a query to execute against instances of one or
         more object types. A set of ElementName elements may be included 
         to specify an adhoc view of the csw:Record instances in the result 
         set. Otherwise, use ElementSetName to specify a predefined view. 
         The Constraint element contains a query filter expressed in a 
         supported query language. A sorting criterion that specifies a 
         property to sort by may be included.

         typeNames - a list of object types to query.</xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
          <xsd:extension base="csw:AbstractQueryType">
            <xsd:sequence>
              <xsd:choice>
                <xsd:element ref="csw:ElementSetName" />
                <xsd:element name="ElementName" type="xsd:anyURI" minOccurs="1" maxOccurs="unbounded" />
              </xsd:choice>
              <xsd:element ref="csw:Constraint" minOccurs="0" maxOccurs="1" />
              <xsd:element ref="ogc:SortBy" minOccurs="0" maxOccurs="1" />
            </xsd:sequence>
            <xsd:attribute name="typeNames" type="csw:TypeNameListType" use="required" />
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>
      <xsd:simpleType name="TypeNameListType" id="TypeNameListType">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">The exact syntax is defined in an application profile. If querying 
       against the common record properties, only a single type may be 
       specified (Record).</xsd:documentation>
        </xsd:annotation>
        <xsd:list itemType="xsd:anyURI" />
      </xsd:simpleType>
      <xsd:element name="Constraint" type="csw:QueryConstraintType" id="Constraint" />
      <xsd:complexType name="QueryConstraintType" id="QueryConstraintType">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">A search constraint that adheres to one of the following syntaxes:
         Filter   - OGC filter expression
         CqlText  - OGC CQL predicate</xsd:documentation>
        </xsd:annotation>
        <xsd:choice>
          <xsd:element ref="ogc:Filter" />
          <xsd:element name="CqlText" type="xsd:string" />
        </xsd:choice>
        <xsd:attribute name="version" type="xsd:string" use="required">
          <xsd:annotation>
            <xsd:documentation>Query language version</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:complexType>
      <xsd:element name="ElementSetName" type="csw:ElementSetNameType" id="ElementSetName" default="summary" />
      <xsd:complexType name="ElementSetNameType" id="ElementSetNameType">
        <xsd:simpleContent>
          <xsd:extension base="csw:ElementSetType">
            <xsd:attribute name="typeNames" type="csw:TypeNameListType" use="optional" />
          </xsd:extension>
        </xsd:simpleContent>
      </xsd:complexType>

      <xsd:simpleType name="ElementSetType" id="ElementSetType">
        <xsd:annotation>
          <xsd:documentation>Named subsets of catalogue object properties; these
         views are mapped to a specific information model and
         are defined in an application profile.</xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="brief" />
          <xsd:enumeration value="summary" />
          <xsd:enumeration value="full" />
        </xsd:restriction>
      </xsd:simpleType>

      <xsd:element name="GetRecordsResponse" type="csw:GetRecordsResponseType" id="GetRecordsResponse" />

      <xsd:complexType name="GetRecordsResponseType">
        <xsd:sequence>
          <xsd:element name="RequestId" type="xsd:anyURI" minOccurs="0" />
          <xsd:element name="SearchStatus" type="csw:RequestStatusType" />
          <xsd:element name="SearchResults" type="csw:SearchResultsType" />
        </xsd:sequence>
        <xsd:attribute name="version" type="xsd:string" use="optional" />
      </xsd:complexType>
      <xsd:complexType name="RequestStatusType" id="RequestStatusType">
        <xsd:attribute name="status" type="csw:StatusType" use="required" />
        <xsd:attribute name="timestamp" type="xsd:dateTime" use="optional" />
      </xsd:complexType>
      <xsd:simpleType name="StatusType" id="StatusType">
        <xsd:restriction base="xsd:string">
          <xsd:enumeration value="complete">
          </xsd:enumeration>
          <xsd:enumeration value="subset">
          </xsd:enumeration>
          <xsd:enumeration value="interim">
          </xsd:enumeration>
          <xsd:enumeration value="none">
          </xsd:enumeration>
          <xsd:enumeration value="processing">
          </xsd:enumeration>
        </xsd:restriction>
      </xsd:simpleType>
      <xsd:complexType name="SearchResultsType" id="SearchResultsType">
        <xsd:sequence>
          <xsd:choice>
            <xsd:element ref="csw:AbstractRecord" minOccurs="0" maxOccurs="unbounded" />
            <xsd:any processContents="strict" namespace="##other" minOccurs="0" maxOccurs="unbounded" />
          </xsd:choice>
        </xsd:sequence>
        <xsd:attribute name="resultSetId" type="xsd:anyURI" use="optional" />
        <xsd:attribute name="elementSet" type="csw:ElementSetType" use="optional" />
        <xsd:attribute name="recordSchema" type="xsd:anyURI" use="optional" />
        <xsd:attribute name="numberOfRecordsMatched" type="xsd:nonNegativeInteger" use="required" />
        <xsd:attribute name="numberOfRecordsReturned" type="xsd:nonNegativeInteger" use="required" />
        <xsd:attribute name="nextRecord" type="xsd:nonNegativeInteger" use="optional" />
        <xsd:attribute name="expires" type="xsd:dateTime" use="optional" />
      </xsd:complexType>
      <xsd:element name="GetRecordById" type="csw:GetRecordByIdType" id="GetRecordById" />
      <xsd:complexType name="GetRecordByIdType" id="GetRecordByIdType">
        <xsd:complexContent>
          <xsd:extension base="csw:RequestBaseType">
            <xsd:sequence>
              <xsd:element name="Id" type="xsd:anyURI" maxOccurs="unbounded" />
              <xsd:element ref="csw:ElementSetName" minOccurs="0" />
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>

      <xsd:element name="GetRecordByIdResponse" type="csw:GetRecordByIdResponseType" id="GetRecordByIdResponse" />

      <xsd:complexType name="GetRecordByIdResponseType" id="GetRecordByIdResponseType">
        <xsd:sequence>
          <xsd:choice>
            <xsd:element ref="csw:AbstractRecord" minOccurs="0" />
            <xsd:any processContents="strict" namespace="##other" minOccurs="0" />
          </xsd:choice>
        </xsd:sequence>
      </xsd:complexType>
      <xsd:element name="GetDomain" type="csw:GetDomainType" id="GetDomain" />
      <xsd:complexType name="GetDomainType" id="GetDomainType">
        <xsd:complexContent>
          <xsd:extension base="csw:RequestBaseType">
            <xsd:sequence>
              <xsd:choice>
                <xsd:element name="PropertyName" type="xsd:anyURI" />
                <xsd:element name="ParameterName" type="xsd:anyURI" />
              </xsd:choice>
            </xsd:sequence>
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>

      <xsd:element name="Acknowledgement" type="csw:AcknowledgementType" id="Acknowledgement" />
      <xsd:complexType name="AcknowledgementType" id="AcknowledgementType">
        <xsd:sequence>
          <xsd:element name="EchoedRequest" type="csw:EchoedRequestType" />
          <xsd:element name="RequestId" type="xsd:anyURI" minOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="timeStamp" type="xsd:dateTime" use="required" />
      </xsd:complexType>
      <xsd:complexType name="EchoedRequestType" id="EchoedRequestType">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">Includes a copy of the request message body.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:any namespace="##any" processContents="lax" />
        </xsd:sequence>
      </xsd:complexType>

      <xsd:element name="Transaction" type="csw:TransactionType" id="Transaction" />

      <xsd:complexType name="TransactionType" id="TransactionType">
        <xsd:complexContent>
          <xsd:extension base="csw:RequestBaseType">
            <xsd:sequence>
              <xsd:choice minOccurs="1" maxOccurs="unbounded">
                <xsd:element name="Insert" type="csw:InsertType" />
                <xsd:element name="Update" type="csw:UpdateType" />
                <xsd:element name="Delete" type="csw:DeleteType" />
              </xsd:choice>
            </xsd:sequence>
            <xsd:attribute name="verboseResponse" type="xsd:boolean" use="optional" default="false" />
            <xsd:attribute name="requestId" type="xsd:anyURI" use="optional" />
          </xsd:extension>
        </xsd:complexContent>
      </xsd:complexType>

      <xsd:complexType name="InsertType" id="InsertType">
        <xsd:sequence>
          <xsd:any processContents="strict" namespace="##other" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="handle" type="xsd:ID" use="optional" />
      </xsd:complexType>

      <xsd:complexType name="UpdateType" id="UpdateType">
        <xsd:sequence>
          <xsd:choice>
            <xsd:any processContents="strict" namespace="##other" />
            <xsd:sequence>
              <xsd:element ref="csw:RecordProperty" maxOccurs="unbounded" />
              <xsd:element ref="csw:Constraint" />
            </xsd:sequence>
          </xsd:choice>
        </xsd:sequence>
        <xsd:attribute name="handle" type="xsd:ID" use="optional" />
      </xsd:complexType>
      <xsd:complexType name="DeleteType" id="DeleteType">
        <xsd:sequence>
          <xsd:element ref="csw:Constraint" minOccurs="1" maxOccurs="1" />
        </xsd:sequence>
        <xsd:attribute name="typeName" type="xsd:anyURI" use="optional" />
        <xsd:attribute name="handle" type="xsd:ID" use="optional" />
      </xsd:complexType>

      <xsd:element name="RecordProperty" type="csw:RecordPropertyType">
        <xsd:annotation>
          <xsd:documentation>The RecordProperty element is used to specify the new
         value of a record property in an update statement.</xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:complexType name="RecordPropertyType">
        <xsd:sequence>
          <xsd:element name="Name" type="xsd:string">
          </xsd:element>
          <xsd:element name="Value" type="xsd:anyType" minOccurs="0">
          </xsd:element>
        </xsd:sequence>
      </xsd:complexType>

      <xsd:element name="TransactionResponse" type="csw:TransactionResponseType" id="TransactionResponse" />
      <xsd:complexType name="TransactionResponseType">
        <xsd:annotation>
          <xsd:documentation xml:lang="en">The response for a transaction request that was successfully
         completed. If the transaction failed for any reason, a service 
         exception report indicating a TransactionFailure is returned instead.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
          <xsd:element name="TransactionSummary" type="csw:TransactionSummaryType" />
          <xsd:element name="InsertResult" type="csw:TransactionResultType" minOccurs="0" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="version" type="xsd:string" use="optional" />
      </xsd:complexType>
      
      <xsd:complexType name="TransactionSummaryType" id="TransactionSummaryType">
        <xsd:sequence>
          <xsd:element name="totalInserted" type="xsd:nonNegativeInteger" minOccurs="0" />
          <xsd:element name="totalUpdated" type="xsd:nonNegativeInteger" minOccurs="0" />
          <xsd:element name="totalDeleted" type="xsd:nonNegativeInteger" minOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="requestId" type="xsd:anyURI" use="optional" />
      </xsd:complexType>
      <xsd:complexType name="TransactionResultType" id="TransactionResultType">
        <xsd:sequence>
          <xsd:element ref="csw:BriefRecord" maxOccurs="unbounded" />
        </xsd:sequence>
        <xsd:attribute name="handleRef" type="xsd:anyURI" use="optional" />
      </xsd:complexType>
     -->
    </xsd:schema>

  </csw:SchemaComponent>
</csw:DescribeRecordResponse>

